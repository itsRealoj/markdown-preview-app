{"version":3,"sources":["component/Markdown.js","App.js","serviceWorker.js","index.js"],"names":["marked","require","Markdown","props","state","input","this","setState","event","style","backgroundColor","height","className","Card","CardBody","CardTitle","CardSubtitle","Input","type","name","id","value","onChange","updateMarkdown","target","placeholder","CardText","dangerouslySetInnerHTML","__html","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2VAUIA,EAASC,EAAQ,IAsDNC,E,kDAnDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,IAHQ,E,gEAQjBC,KAAKC,SAAS,CACZF,MAAO,0B,qCAIIG,GACbF,KAAKC,SAAS,CACZF,MAAOG,M,+BAID,IAAD,OACP,OACE,yBAAKC,MAAO,CAAEC,gBAAiB,QAASC,OAAQ,UAC9C,yBAAKC,UAAU,QACb,kBAACC,EAAA,EAAD,CACED,UAAU,iBACVH,MAAO,CAAEC,gBAAiB,OAAQC,OAAQ,SAC1C,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,oDAEF,kBAACC,EAAA,EAAD,uCACA,kBAACC,EAAA,EAAD,CACEC,KAAK,WACLC,KAAK,OACLC,GAAG,SACHC,MAAOf,KAAKF,MAAMC,MAClBiB,SAAU,SAACd,GAAD,OAAW,EAAKe,eAAef,EAAMgB,OAAOH,QACtDI,YAAY,wBAEd,kBAACC,EAAA,EAAD,CACEd,UAAU,mBACVe,wBAAyB,CACvBC,OAAQ5B,EAAOM,KAAKF,MAAMC,kB,GA3CrBwB,aCERC,MAVf,WACE,OACE,yBAAKlB,UAAU,OACb,6BACE,kBAAC,EAAD,SCIYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d8c9ff76.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  CardText,\n  CardSubtitle,\n  Input,\n} from 'reactstrap';\n\nlet marked = require('marked');\n\nclass Markdown extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      input: '### ``Marked down``',\n    });\n  }\n\n  updateMarkdown(event) {\n    this.setState({\n      input: event,\n    });\n  }\n\n  render() {\n    return (\n      <div style={{ backgroundColor: 'white', height: '100vh' }}>\n        <div className='mt-5'>\n          <Card\n            className='w-50 container'\n            style={{ backgroundColor: 'grey', height: '75vh' }}>\n            <CardBody>\n              <CardTitle>\n                <b>MARKDOWN PREVIEW APP</b>\n              </CardTitle>\n              <CardSubtitle>Entered text to mark down HTML</CardSubtitle>\n              <Input\n                type='textarea'\n                name='text'\n                id='editor'\n                value={this.state.input}\n                onChange={(event) => this.updateMarkdown(event.target.value)}\n                placeholder='Enter Markdown Text'\n              />\n              <CardText\n                className='align-items-left'\n                dangerouslySetInnerHTML={{\n                  __html: marked(this.state.input),\n                }}></CardText>\n            </CardBody>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Markdown;\n","import React from 'react';\nimport './App.css';\nimport Markdown from './component/Markdown.js';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <div>\n        <Markdown />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}